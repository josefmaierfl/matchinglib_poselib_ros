#!/usr/bin/env python
PACKAGE = "matchinglib_poselib_ros"
CONFIG_FILE_PREFIX = "Node"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

general = gen.add_group("General_Node_Settings")

general.add("verbosity_level",      int_t, 0, "", 6, 0, 6)
general.add("skip_pose_esimation", bool_t, 0, "Skip Pose estimation and use only input pose for rectification.", False)
general.add("hist_equalization", bool_t, 0, "Use histogram equalization on source images.", False)
general.add("rect_img_scaling", double_t, 0, "Scaling paramter for controling the image size of rectified images. A value of 0 means that the rectified images contain only valid pixels. For a value of 1, all pixels from the source image are visible in the rectified image.", 0.2, 0, 1)

sel = general.add_group("Image_Selection_Settings");

sel_type_enum = gen.enum([ gen.const("sAll",      int_t, 0, ""),
                 gen.const("sCount",    int_t, 1, ""),
                 gen.const("sTime",     int_t, 2, ""),
                 gen.const("sBaseline", int_t, 3, "")], "Selection Variant for image pairs.")
sel.add("selection_type", int_t, 0, "Select variant for finding image pairs.", 0, 0, 3, edit_method=sel_type_enum)
sel.add("selection_skip_count",   int_t, 0, "", 1, 0, 50)
sel.add("selection_time_diff_ms",   int_t, 0, "", 1000, 0, 60000)
sel.add("selection_baseline_m",   int_t, 0, "", 1, 0, 20)

pubMatch = general.add_group("Publish_Matches")

pubMatch.add("publish_matches", bool_t, 0, "Publish Matches.", True)
pubMatch.add("num_drawn_matches",    int_t, 0, "Number of matches to be drawn (-1: all matches, -2: all + not matchable KPs).", 50, -2, 100)

matching = gen.add_group("Matching_Settings")

detector_enum = gen.enum([ gen.const("dFAST",  int_t, 0, ""),
               gen.const("dMSER",  int_t, 1, ""),
               gen.const("dORB",   int_t, 2, ""),
               gen.const("dBRISK", int_t, 3, ""),
               gen.const("dKAZE",  int_t, 4, ""),
               gen.const("dAKAZE", int_t, 5, ""),
               gen.const("dSTAR",  int_t, 6, ""),
	       gen.const("dMSD",  int_t, 7, ""),
               gen.const("dSIFT",  int_t, 8, ""),
               gen.const("dSURF",  int_t, 9, "")], "Available Feature Detectors.")
matching.add("feature_detector", int_t, 0, "Select Feature Detector.", 0, 0, 9, edit_method=detector_enum)

extractor_enum = gen.enum([ gen.const("eBRISK", int_t, 0, ""),
                gen.const("eORB",   int_t, 1, ""),
                gen.const("eKAZE",  int_t, 2, ""),
                gen.const("eAKAZE", int_t, 3, ""),
                gen.const("eFREAK", int_t, 4, ""),
                gen.const("eDAISY", int_t, 5, ""),
		gen.const("eLATCH", int_t, 6, ""),
                gen.const("eBGM", int_t, 7, ""),
                gen.const("eBGM_HARD", int_t, 8, ""),
                gen.const("eBGM_BILINEAR", int_t, 9, ""),
                gen.const("eLBGM", int_t, 10, ""),
                gen.const("eBINBOOST_64", int_t, 11, ""),
                gen.const("eBINBOOST_128", int_t, 12, ""),
                gen.const("eBINBOOST_256", int_t, 13, ""),
                gen.const("eVGG_120", int_t, 14, ""),
                gen.const("eVGG_80", int_t, 15, ""),
                gen.const("eVGG_64", int_t, 16, ""),
                gen.const("eVGG_48", int_t, 17, ""),
                gen.const("eRIFF", int_t, 18, ""),
                gen.const("eBOLD", int_t, 19, ""),
                gen.const("eSIFT",  int_t, 20, ""),
                gen.const("eSURF",  int_t, 21, "")], "Available Descriptor Extractors.")
matching.add("descriptor_extractor", int_t, 0, "Select Descriptor Extractors.", 4, 0, 21, edit_method=extractor_enum)

matcher_enum = gen.enum([ gen.const("GMBSOF_Guided_Matching_based_on_Statistical_Optical_Flow", int_t, 0, ""),
              gen.const("CASHASH_Cascade_Hashing_matcher", int_t, 1, ""),
              gen.const("HIRCLUIDX_Hierarchical_Clustering_Index_Matching_from_the_FLANN_library", int_t, 2, ""),
              gen.const("HIRKMEANS_Hierarchical_kmeans_tree_matcher_from_the_FLANN_library", int_t, 3, ""),
              gen.const("LINEAR_Linear_matching_algorithm_Brute_force_from_the_FLANN_library", int_t, 4, ""),
              gen.const("LSHIDX_Algorithm_from_the_FLANN_library_NOT_STABLE_bug_in_FLANN_lib_program_may_crash", int_t, 5, ""),
              gen.const("RANDKDTREE_Randomized_KDtrees_matcher_from_the_FLANN_library", int_t, 6, ""),
              gen.const("SWGRAPH_Small_World_Graph_from_the_NMSLib", int_t, 7, ""),
              gen.const("HNSW_Hierarchical_Navigable_Small_World_Graph", int_t, 8, ""),
              gen.const("VPTREE_VP_tree_from_the_NMSLib", int_t, 9, ""),
              gen.const("MVPTREE_Multi_Vantage_Point_Tree_from_the_NMSLib", int_t, 10, ""),
              gen.const("GHTREE_GH_Tree_from_the_NMSLib", int_t, 11, ""),
              gen.const("LISTCLU_List_of_clusters_from_the_NMSLib", int_t, 12, ""),
              gen.const("SATREE_Spatial_Approximation_Tree_form_the_NMSLib", int_t, 13, ""),
              gen.const("BRUTEFORCENMS_Brute_force_searching_from_the_NMSLib", int_t, 14, ""),
              gen.const("ANNOY_Approximate_Nearest_Neighbors_Matcher", int_t, 15, "")], "Available Matchers.")
matching.add("matcher", int_t, 0, "Select Matcher.", 0, 0, 15, edit_method=matcher_enum)

matching.add("max_keypoints_per_frame", int_t, 0, "Maximum number of keypoints per frame used for matching.", 2000, 50, 30000)

matching.add("detect_keypoints_dynamically", bool_t, 0, "Detect keypoints dynamically to limit the number approximately to the maximum.", False)

nms = matching.add_group("NMS_Settings")
nms.add("nms_idx", str_t, 0, "Index parameters", "")
nms.add("nms_query", str_t, 0, "Query-time parameters", "")

ref = gen.add_group("Refinement_Options")

ref.add("disable_ratio_test",   bool_t, 0, "Disable Ratio Test.", False)
ref.add("refine_VFC",           bool_t, 0, "Refine result with VFC.", False)
ref.add("refine_SOF",           bool_t, 0, "Refine result with SOF.", False)
ref.add("refine_GMS",           bool_t, 0, "Refine result with GMS.", False)

refine_subpixel_enum = gen.enum([ gen.const("Disable_subpixel_refinement", int_t, 0, ""),
        gen.const("Refine_feature_positions_to_get_subpixel_accuracy_using_template_matching", int_t, 1, ""),
        gen.const("Refine_feature_positions_to_get_subpixel_accuracy_using_OpenCVs_corner_refinement_cornerSubPix", int_t, 2, "")], "Available subpixel refinement.")
ref.add("refine_sub_px", int_t, 0, "Select subpixel refinement method.", 0, 0, 2, edit_method=refine_subpixel_enum)

ref.add("sampson_error_threshold", double_t, 0, "Threshold for RANSAC variants on the Sampson error", 0.8, 0.5, 3)

refE = ref.add_group("Post_refinement_of_Essential_matrix")

refineRT_enum = gen.enum([ gen.const("Disable_subsequent_refinement_of_Essential_matrix", int_t, 0, ""),
      gen.const("Old_version_of_the_8_point_algorithm_with_pseudo_huber_cost_function", int_t, 1, ""),
      gen.const("Eight_point_algorithm", int_t, 2, ""),
      gen.const("Nister_algorithm", int_t, 3, ""),
      gen.const("Stewenius_algorithm", int_t, 4, ""),
      gen.const("Kneips_Eigen_solver_is_applied_on_the_result_of_RANSAC_ARRSAC_or_USAC_directly", int_t, 5, ""),
      gen.const("Alternative_to_bundle_adjustment_using_Kneips_Eigen_solver_after_extracting_R_t_and_triangulation", int_t, 6, "")], "Available Essential matrix refinements.")
refE.add("refine_RT", int_t, 0, "Select an dditional refinement method for the Essential matrix.", 0, 0, 6, edit_method=refineRT_enum)

refineRT_weighting_enum = gen.enum([ gen.const("Dont_use_weights", int_t, 0, ""),
          gen.const("Torr_weights", int_t, 1, ""),
          gen.const("Pseudo_Huber_weights", int_t, 2, "")], "Available weighting functions for Essential matrix refinement.")
refE.add("refine_RT_weights", int_t, 0, "Weighting functions for the refinement of the Essential matrix.", 2, 0, 2, edit_method=refineRT_weighting_enum)

homography_enum = gen.enum([ gen.const("No_estimation_with_homographies",                  int_t, 0, ""),
                 gen.const("Estimate_homographies_without_variable_threshold", int_t, 1, ""),
                 gen.const("Estimate_homographies_with_variable_threshold",    int_t, 2, "")], "Available Homographies.")

ref.add("estimate_homographies", int_t, 0, "Enable pose estimation using homographies.", 0, 0, 2, edit_method=homography_enum)

ba_enum = gen.enum([ gen.const("No_refinement_using_bundle_adjustment",                  int_t, 0, ""),
           gen.const("BA_for_extrinsics_only_including_structure", int_t, 1, ""),
           gen.const("BA_for_extrinsics_and_intrinsics_including_structure",    int_t, 2, "")], "Available bundle adjustments.")

ref.add("refine_BA", int_t, 0, "Select bundle adjustment for refining the pose.", 0, 0, 2, edit_method=ba_enum)

ref.add("max_z_distance_3DPts", double_t, 0, "Maximum value for the z coordinates of 3D points to be included into BA. Moreover, this value influences the decision if a pose is marked as stable during stereo refinement.", 50.0, 5.0, 200.0)

ref.add("auto_adapt_threshold", bool_t, 0, "Adapt the threshold for estimating the pose automatically. This methode always uses ARRSAC with subsequent refinement.", False)

method_enum = gen.enum([ gen.const("USAC", int_t, 0, ""),
             gen.const("ARRSAC", int_t, 1, ""),
               gen.const("RANSAC",  int_t, 2, ""),
               gen.const("LMEDS",   int_t, 3, "")], "Available robust methods.")

ref.add("robust_method", int_t, 0, "Select method for robust estimation of the essential matrix.", 0, 0, 3, edit_method=method_enum)

usac = ref.add_group("USAC_Configuration")

usac_sprt_enum = gen.enum([ gen.const("default_SPRT", int_t, 0, ""),
                gen.const("auto_estimation_of_SPRT_delta", int_t, 1, ""),
              gen.const("auto_estimation_of_SPRT_epsilon", int_t, 2, ""),
                gen.const("auto_estimation_of_SPRT_delta_and_epsilon",    int_t, 3, "")], "Paramters for faster USAC.")
usac.add("sprt", int_t, 0, "Select sprt options.", 3, 0, 3, edit_method=usac_sprt_enum)
usac_prosac_enum = gen.enum([ gen.const("default_PROSAC_beta", int_t, 0, ""),
                gen.const("auto_estimation_with_SPRT_delta",    int_t, 1, "")], "Available estimators.")
usac.add("prosac_beta", int_t, 0, "Select PROSAC beta options.", 1, 0, 1, edit_method=usac_prosac_enum)
usac.add("prevalidate_samples", bool_t, 0, "Prevalidate samples.", True)
usac_dc_enum = gen.enum([ gen.const("Disable_degeneracy_check", int_t, 0, ""),
                gen.const("QDEGSAC", int_t, 1, ""),
                gen.const("USAC_internal_degeneracy_check",    int_t, 2, "")], "Available degeneracy check variants.")
usac.add("degeneracy_check", int_t, 0, "Select degenery check options.", 2, 0, 2, edit_method=usac_dc_enum)
usac.add("degeneracy_threshold", double_t, 0, "Degeneracy Threshold", 0.85, 0.8, 2)
usac_est_enum = gen.enum([ gen.const("Nister_estimator", int_t, 0, ""),
                gen.const("Kneips_Eigen_Solver_estimator", int_t, 1, ""),
                gen.const("Stewenius_estimator",    int_t, 2, "")], "Available estimators.")
usac.add("usac_estimator", int_t, 0, "Select estimator.", 2, 0, 2, edit_method=usac_est_enum)
usac_inner_ref_enum = gen.enum([ gen.const("8pt_with_Torr_weights", int_t, 0, ""),
                gen.const("8pt_with_pseudo_huber_weights", int_t, 1, ""),
              gen.const("Kneips_Eigen_Solver", int_t, 2, ""),
              gen.const("Kneips_Eigen_Solver_with_Torr_weights", int_t, 3, ""),
              gen.const("Stewenius", int_t, 4, ""),
              gen.const("Stewenius_with_pseudo_huber_weights", int_t, 5, ""),
              gen.const("Nister", int_t, 6, ""),
                gen.const("Nister_with_pseudo_huber_weights",    int_t, 7, "")], "Available inner refinement algorithms.")
usac.add("inner_refinement_algorithm", int_t, 0, "Select inner refinement algorithm.", 5, 0, 7, edit_method=usac_inner_ref_enum)
usac_inlrat_filter_enum = gen.enum([ gen.const("GMS_filter", int_t, 0, ""),
                gen.const("VFC_filter",    int_t, 1, "")], "Available matching filters for inlier estimation.")
usac.add("usac_inlrat_filter", int_t, 0, "Select matching filter for inlier ratio estimation.", 0, 0, 1, edit_method=usac_inlrat_filter_enum)

stereoref = gen.add_group("Stereo_Refinement")

stereoref.add("stereo_refine",           bool_t, 0, "Enable stereo refinement.", False)
stereoref.add("eval_nth_pair_if_stable", int_t,  0, "Use the last stable pose for n pairs without new estimation.", 0, 0, 1000)
stereoref.add("use_only_stable_pose",    bool_t, 0, "Use only stable poses for rectification. During instability the last stable pose is used.", False)
stereoref.add("use_most_likely_pose",    bool_t, 0, "Use the most likely pose of the last valid poses and not the actual pose.", False)

refmult = stereoref.add_group("Refinement_of_Essential_matrix_with_aggregated_correspondences")

refineRT_stereo_enum = gen.enum([ gen.const("Old_version_of_the_8_point_algorithm_with_pseudo_huber_cost_func", int_t, 1, ""),
      gen.const("Eight_point_alg", int_t, 2, ""),
      gen.const("Nister_alg", int_t, 3, ""),
      gen.const("Stewenius_alg", int_t, 4, ""),
      gen.const("Kneips_Eigen_solver_is_applied_on_the_result_of_RANSAC_ARRSAC_or_USAC_directly_", int_t, 5, ""),
      gen.const("Alternative_to_bundle_adjustment_using_Kneips_Eigen_solver_after_extracting_R_t_and_triangulation_", int_t, 6, "")], "Available Essential matrix refinements.")
refmult.add("refine_RT_stereo", int_t, 0, "Select an dditional refinement method for the Essential matrix.", 4, 1, 6, edit_method=refineRT_stereo_enum)
refmult.add("refine_RT_weights_stereo", int_t, 0, "Weighting functions for the refinement of the Essential matrix.", 2, 0, 2, edit_method=refineRT_weighting_enum)
refmult.add("refine_BA_stereo", int_t, 0, "Select bundle adjustment for refining the pose.", 0, 0, 2, edit_method=ba_enum)

sensi = stereoref.add_group("Sensibility_to_changing_pose_and_bad_image_pairs")

sensi.add("min_Inl_Rat_Start_Corr_Aggregation", double_t, 0, "Minimum inlier ratio at robust estimation to start correspondence aggregation.", 0.2, 0, 0.75)
sensi.add("rel_inv_Inl_Rat_TH_to_Last_Inl_Rat_use_Robust", double_t, 0, "Maximum relative change of the inlier ratio between image pairs to check by a robsut method if the pose changed.", 0.35, 0.05, 0.75)
sensi.add("rel_inv_Inl_Rat_TH_new_Data_after_Robust", double_t, 0, "Maximum relative change between the inlier ratio with the last E and the new robustly estimated E on the new image pair", 0.2, 0.04, 0.5)
sensi.add("abs_max_Inl_Rat_TH_on_new_robust_for_bad_pair", double_t, 0, "Maximum inlier ratio using the robustly estimated E to decide if the image pair quality is too bad. rel_Inl_Rat_TH_new_robust_last_valid_bad_pair also influences the decision.", 0.38, 0.05, 0.95)
sensi.add("rel_Inl_Rat_TH_new_robust_last_valid_bad_pair", double_t, 0, "Multiplication factor on the inlier ratio from the last image pair compared to the new robust estimated one to decide if the new image pair quality is too bad. abs_max_Inl_Rat_TH_on_new_robust_for_bad_pair also influences the decision.", 0.7, 0.05, 1.0)
sensi.add("max_skip_pairs_change_detected", int_t, 0, "Number of consecutive image pairs where a change in pose or a bad pair was detected until the system is reinitialized.", 5, 1, 200)
sensi.add("min_Inl_Rat_TH_after_robust_reinit", double_t, 0, "Minimum inlier ratio after a change in pose was detected to immediately reinitialize the system.", 0.6, 0.15, 0.8)
sensi.add("raise_skip_pair_cnt_factor", int_t, 0, "If not 0, the value of max_skip_pairs_change_detected is increased after a specific number of stable consecutive poses were detected.", 0, 0, 15)
sensi.add("raise_skip_pair_cnt_after_n_stable", int_t, 0, "Number of stable consecutive poses (plus 1) after which max_skip_pairs_change_detected is increased using raise_skip_pair_cnt_factor.", 0, 0, 15)

stereoref.add("min_Pts_dist_in_pool", double_t, 0, "Minimum distance between correspondences in the pool.", 3.0, 1.5, 10)
stereoref.add("max_Pool_Correspondences", int_t, 0, "Maximum number of correspondences in the pool.", 30000, 1000, 60000)
stereoref.add("min_similar_poses_to_stable", int_t, 0, "Minimum number of poses that must be very similar in terms of their geometric distance to detect stability.", 3, 3, 10)
stereoref.add("max_norm_error_range_th_pairs_to_stable", double_t, 0, "Maximum normalized error range difference between image pairs to detect stability. This is only a fallback solution if stability is not found from the poses directly and the maximum pool size is reached.", 0.075, 0.01, 0.9)
stereoref.add("max_ratio_3DPts_too_far", double_t, 0, "Maximum ratio of 3D points for which their z value is larger max_z_distance_3DPts x baseline compared to the number of all 3D points. Above this threshold, a pose cannot be marked as stable using only a threshold on the Sampson error ranges as defined by max_norm_error_range_th_pairs_to_stable.", 0.5, 0, 1.0)

refmult.add("use_RANSAC_few_corrs",           bool_t, 0, "Use RANSAC for robust estimation if less than 100 matches are available.", False)
refmult.add("nth_iteration_robust_on_pool", int_t, 0, "After this number of iterations or new image pairs, robust estimation is performed on the pool correspondences. The number automatically grows exponentially after each robust estimation. If 1, robust estimation is used instead of refinement. If 0, it is disabled", 3, 0, 20)

sensi.add("min_dorm_distance_for_stable_pose", double_t, 0, "Minimum normalized distance to the center of gravity of all valid poses to detect stability.", 0.5, 0.01, 1)

exit(gen.generate(PACKAGE, PACKAGE, CONFIG_FILE_PREFIX))
